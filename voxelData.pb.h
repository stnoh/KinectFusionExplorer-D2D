// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: voxelData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_voxelData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_voxelData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_voxelData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_voxelData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_voxelData_2eproto;
class List_Voxel;
class List_VoxelDefaultTypeInternal;
extern List_VoxelDefaultTypeInternal _List_Voxel_default_instance_;
class Voxel;
class VoxelDefaultTypeInternal;
extern VoxelDefaultTypeInternal _Voxel_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::List_Voxel* Arena::CreateMaybeMessage<::List_Voxel>(Arena*);
template<> ::Voxel* Arena::CreateMaybeMessage<::Voxel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class List_Voxel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:List_Voxel) */ {
 public:
  List_Voxel();
  virtual ~List_Voxel();

  List_Voxel(const List_Voxel& from);
  List_Voxel(List_Voxel&& from) noexcept
    : List_Voxel() {
    *this = ::std::move(from);
  }

  inline List_Voxel& operator=(const List_Voxel& from) {
    CopyFrom(from);
    return *this;
  }
  inline List_Voxel& operator=(List_Voxel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const List_Voxel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const List_Voxel* internal_default_instance() {
    return reinterpret_cast<const List_Voxel*>(
               &_List_Voxel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(List_Voxel* other);
  friend void swap(List_Voxel& a, List_Voxel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline List_Voxel* New() const final {
    return CreateMaybeMessage<List_Voxel>(nullptr);
  }

  List_Voxel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<List_Voxel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const List_Voxel& from);
  void MergeFrom(const List_Voxel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(List_Voxel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "List_Voxel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_voxelData_2eproto);
    return ::descriptor_table_voxelData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Voxel items = 1;
  int items_size() const;
  void clear_items();
  static const int kItemsFieldNumber = 1;
  ::Voxel* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Voxel >*
      mutable_items();
  const ::Voxel& items(int index) const;
  ::Voxel* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Voxel >&
      items() const;

  // @@protoc_insertion_point(class_scope:List_Voxel)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Voxel > items_;
  friend struct ::TableStruct_voxelData_2eproto;
};
// -------------------------------------------------------------------

class Voxel :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Voxel) */ {
 public:
  Voxel();
  virtual ~Voxel();

  Voxel(const Voxel& from);
  Voxel(Voxel&& from) noexcept
    : Voxel() {
    *this = ::std::move(from);
  }

  inline Voxel& operator=(const Voxel& from) {
    CopyFrom(from);
    return *this;
  }
  inline Voxel& operator=(Voxel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Voxel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Voxel* internal_default_instance() {
    return reinterpret_cast<const Voxel*>(
               &_Voxel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Voxel* other);
  friend void swap(Voxel& a, Voxel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Voxel* New() const final {
    return CreateMaybeMessage<Voxel>(nullptr);
  }

  Voxel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Voxel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Voxel& from);
  void MergeFrom(const Voxel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Voxel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Voxel";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_voxelData_2eproto);
    return ::descriptor_table_voxelData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 index = 1 [default = 0];
  bool has_index() const;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 tsdf = 2 [default = 0];
  bool has_tsdf() const;
  void clear_tsdf();
  static const int kTsdfFieldNumber = 2;
  ::PROTOBUF_NAMESPACE_ID::int32 tsdf() const;
  void set_tsdf(::PROTOBUF_NAMESPACE_ID::int32 value);

  // optional int32 color = 3 [default = 0];
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 3;
  ::PROTOBUF_NAMESPACE_ID::int32 color() const;
  void set_color(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:Voxel)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 index_;
  ::PROTOBUF_NAMESPACE_ID::int32 tsdf_;
  ::PROTOBUF_NAMESPACE_ID::int32 color_;
  friend struct ::TableStruct_voxelData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// List_Voxel

// repeated .Voxel items = 1;
inline int List_Voxel::items_size() const {
  return items_.size();
}
inline void List_Voxel::clear_items() {
  items_.Clear();
}
inline ::Voxel* List_Voxel::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:List_Voxel.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Voxel >*
List_Voxel::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:List_Voxel.items)
  return &items_;
}
inline const ::Voxel& List_Voxel::items(int index) const {
  // @@protoc_insertion_point(field_get:List_Voxel.items)
  return items_.Get(index);
}
inline ::Voxel* List_Voxel::add_items() {
  // @@protoc_insertion_point(field_add:List_Voxel.items)
  return items_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Voxel >&
List_Voxel::items() const {
  // @@protoc_insertion_point(field_list:List_Voxel.items)
  return items_;
}

// -------------------------------------------------------------------

// Voxel

// optional int32 index = 1 [default = 0];
inline bool Voxel::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Voxel::clear_index() {
  index_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Voxel::index() const {
  // @@protoc_insertion_point(field_get:Voxel.index)
  return index_;
}
inline void Voxel::set_index(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  index_ = value;
  // @@protoc_insertion_point(field_set:Voxel.index)
}

// optional int32 tsdf = 2 [default = 0];
inline bool Voxel::has_tsdf() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Voxel::clear_tsdf() {
  tsdf_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Voxel::tsdf() const {
  // @@protoc_insertion_point(field_get:Voxel.tsdf)
  return tsdf_;
}
inline void Voxel::set_tsdf(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  tsdf_ = value;
  // @@protoc_insertion_point(field_set:Voxel.tsdf)
}

// optional int32 color = 3 [default = 0];
inline bool Voxel::has_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Voxel::clear_color() {
  color_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Voxel::color() const {
  // @@protoc_insertion_point(field_get:Voxel.color)
  return color_;
}
inline void Voxel::set_color(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  color_ = value;
  // @@protoc_insertion_point(field_set:Voxel.color)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_voxelData_2eproto
